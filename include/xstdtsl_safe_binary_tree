#pragma once
#ifndef __XSTDTSL_SAFE_BINARY_TREE_H
#define __XSTDTSL_SAFE_BINARY_TREE_H

#include <xstdtsl_mutex>
#include <xstdtsl_binary_tree_helper.hpp>

namespace xstdtsl
{

	template<class T> class safe_binary_tree : public binary_tree_helper::safe_binary_tree<binary_tree_helper::node,T>
	{
	public:
		friend class binary_tree_helper::iterator_base<safe_binary_tree,binary_tree_helper::node,T>;
		friend class binary_tree_helper::read_iterator<safe_binary_tree,binary_tree_helper::node,T>;
		friend class binary_tree_helper::control_base<safe_binary_tree,T>;
		friend class binary_tree_helper::read_control<safe_binary_tree,T>;
		friend class binary_tree_helper::write_control<safe_binary_tree,T>;

		typedef binary_tree_helper::safe_binary_tree<binary_tree_helper::node,T>				basetree;
		typedef binary_tree_helper::node<T>														nodetype;
		typedef T																				datatype;

		typedef binary_tree_helper::read_iterator<safe_binary_tree,binary_tree_helper::node,T> 	read_iterator;
		typedef binary_tree_helper::read_control<safe_binary_tree,T> 							read_control;
		typedef binary_tree_helper::write_control<safe_binary_tree,T> 							write_control;
	protected:
		///

	};
}
#endif // #ifndef __XSTDTSL_SAFE_BINARY_TREE_H
